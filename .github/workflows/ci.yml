# This workflow will do a clean installation of node dependencies, check code formatting, lint
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  setup-and-install:
    name: Install Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Detect Package Manager
        id: detect-pm
        shell: bash
        run: |
          PACKAGE_MANAGER=""
          if [ -f pnpm-lock.yaml ]; then
            PACKAGE_MANAGER="pnpm"
          elif [ -f yarn.lock ]; then
            PACKAGE_MANAGER="yarn"
          elif [ -f package-lock.json ]; then
            PACKAGE_MANAGER="npm"
          elif [ -f bun.lock ]; then
            PACKAGE_MANAGER="bun"
          else
            PACKAGE_MANAGER="pnpm"
            echo "No lock file found. Defaulting to pnpm."
          fi
          echo "Detected package manager: $PACKAGE_MANAGER"
          echo "PACKAGE_MANAGER=$PACKAGE_MANAGER" >> $GITHUB_ENV

      - name: Setup Node.js and Detected Package Manager
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup pnpm (if detected)
        if: env.PACKAGE_MANAGER == 'pnpm'
        shell: bash
        run: |
          echo "Enabling pnpm using corepack..."
          corepack enable pnpm

      - name: Setup bun (if detected)
        if: env.PACKAGE_MANAGER == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        shell: bash
        run: |
          case "$PACKAGE_MANAGER" in
            pnpm)
              echo "Running pnpm install..."
              pnpm install --frozen-lockfile
              ;;
            yarn)
              echo "Running yarn install..."
              yarn install --frozen-lockfile
              ;;
            npm)
              echo "Running npm install..."
              npm ci
              ;;
            bun)
              echo "Running bun install..."
              bun install
              ;;
            *)
              echo "Unknown package manager: $PACKAGE_MANAGER"
              exit 1
              ;;
          esac

      - name: Upload Repository with Dependencies as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-with-deps
          path: . # Upload the entire current directory (the workspace)
          retention-days: 1 # Set how long to keep the artifact

  prettier:
    name: Prettier
    runs-on: ubuntu-latest
    needs: setup-and-install

    steps:
      - name: Download Repository with Dependencies Artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-with-deps

      - name: Setup Node.js
        # Although node_modules is present, setup-node is needed to get
        # the 'node' executable and potentially package manager binaries in the PATH
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Format
        run: pnpm run format

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    needs: setup-and-install

    steps:
      - name: Download Repository with Dependencies Artifact
        uses: actions/download-artifact@v4
        with:
          name: repo-with-deps

      - name: Setup Node.js
        # Although node_modules is present, setup-node is needed to get
        # the 'node' executable and potentially package manager binaries in the PATH
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Lint
        run: pnpm run lint
